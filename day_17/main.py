import cProfile
from copy import deepcopy
import pstats
import io

SHAPES_PATTERN = [
    """####""",
    """.#.
###
.#.""",
    """..#
..#
###""",
    """#
#
#
#""",
    """##
##"""
]

JET_PATTERN = '>>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>'
JET_PATTERN_PUZZLE = '><<<<>>>><<<><<<><<<>><<>>><>><>><<<<>><<<<>><<<>>>><<<><<<>>>><<<<><<><<>><<>>>><<<>>><<<>>>><<>><>><<<<>>><<<>>>><<<<><<>>><<<>>><<>>><>>>><>><>>>><<<>>><<<>><>>><<<<>>><>>>><<<>>>><<<<>><<>>>><<>><>>><<>>><>>>><<<>><<>>><<>>><<<<>>>><>>><>><<<<>>><<<>>><<<<>>>><<<>>><<<>><><<<<>>><<<<><<<>>><<><>>><<<<>>>><>><<<>><<>>><<<<>><<<>>><<>>>><>>>><>>><>>>><<<><<<<>><<>><>>><<>>>><<<<>>>><>>>><>><<<<>>>><<<<>>><<>>><<><>><<<<>><><<<<>>><<<>>><<<>>><<<>><<>>>><<<><<<>>><><<>>>><<<><>>>><<>>><>><<<>>><<<<><<<>><<<>><>>><<<<>>><<>>>><>><<<>>>><<<<>>>><<<>><<<>>>><<>><<>>>><<>>><<<<>>><>>>><>><<<>><<<>>><<<<>>>><<<>>>><>>><>>><>>><><<<>><<<>>><<<<>>>><<<>>>><<>>><<<<>><>><<>>>><>><<>><<<<>>><<<>><<><<<<>><<<<>><<<<><<>><>>><<<><<<><<<<>><<<>>><<>>><>>><<<<>><<><>><<>>><><<<<>>>><<>>>><<<<>>><>><<<<>><<>>>><<<>>>><<<>>>><<><<<<>>>><<<><<<<><<<>>>><<>>><<><>>>><<<>>>><<<<>>>><<<><<<>><<>>>><>>>><>><<<><>>>><<<>>>><<<<>><<<><<<<>>>><<>><>>><<<>>><>><>>>><<<<>>>><<<><<<>><<>>><<<>>><>>><><>>><<>><<>>><<<<>><<><<<>><><<><<>><>>>><<>>>><<<<>>><>>>><>>><<<>>><<<>>>><<><>>><<<>>><>>>><>>>><><<>>>><<<>>><<<>><<>>>><>>>><<><>>>><<<><<<>>>><<<<>>>><<>>><<<<>><<<>><><<<>>>><>>><><><<<><<>><<>>>><<<><<><<<>>>><<<<>>><<><<>>><<<>>>><>>>><<<<>><>><<><<<>><<<>>><<<<>>>><<><<<<>>>><>><<<>>>><<<<><<<<>>>><<>><<>><<><<>>>><<>>><<><<>>>><<>>>><<>>>><<<<><<<<><<<<><<<>>><<<<>>>><>>>><<<>>><<>>><<<>>>><>>><<>>>><<<>><<>>><<><>><<<>><<><<>>>><<>><<<<>><<<>>>><<<>>><<>>><<>>><<>>>><<<<>><>>><>>><><<<><>>><<<>>><><<>>>><<><<<<>><<<<>>><<<<>>><<<<>>><<<>>><<<<>>>><<<<>>><<>>><<<<>><>>>><>>><>><<<><<<><<>><<><<<<><<<<>><<<<><>><<<>>>><<<<>>>><>>><<<>>><>>><<>><<><<>>>><<>><<<<>>><<<>>>><<>>><<>><<<><<<<>>>><<>><>>>><<<<><>>><<>>><>>><<<>>><>><<>><<>>>><<<<><<>><<<<>>>><<<<>>><<<<><>>>><>>><<><>>><<<<>>>><>><<<><><>><><><<<<>><<<<>>><<<><<<<>><>>>><<<><<<<>>><<>>><>>><<<>>><<<<>><><<<>>><<>>>><><<<<><<><<><<<>>><>><>>><<<>><<<<>>>><<<>><<<<><<<<>>><<<<><<>>>><<<>><>><<<>>><<<<>><>>><<<<>><<<<>>><<<<>>>><<>><<<>><<>>><<>>>><>><<><<<>>><<<<><<>><<<<>>><<<>>>><<>><<><>><<<>>><>><<<<>>><<<<><<>><<<>>><<>>>><<<>>>><<<<>><<<<><<<<>>>><<<<>>>><<><<<<>>>><>>>><<<<>>><<<<>><<>><<<<>>><<<<>>>><<>><<>><<<<><<<<>>><<<><<<>><>>>><>>>><<>><<<<>>>><>>>><<<>>>><<<>>><<<<><<<>>>><<>>>><<><<<<>><><<<>>><<<><>><<<<><<<>>>><>><<>>><<<>>>><<>>><<<>><<>>>><<<<>>>><<<<>>><<>>>><<<<>>><<<<>><<>>><<<><>>><<>>><>><<><>>><<<><<>>><<<>>><<<>><<>>><>><>><><<<<>>><<<>><<<<>>>><<<<>><>>><<<<><>>><><<<<>>><<<>>>><>>><<<>><>><<<>>>><<<<><<<>>><<><<>>><<<>>>><><<<>>><<>><<<><<<<>><>>><<><<>>><<<<>><<<<>><<<<><<><>>><><<>>>><<>>>><<<<>>><<<>><<<><<<<>>>><<>>><<<>>><>>><<<><>>>><<<><<<<>>>><>><>><<<>>>><<<>><<>><<>>><<<<>><<<<>>>><<<<>>>><<><>>>><<<<>>>><<<<>><<<<><<<<>>><<<<>><<<>>>><>><<<><<<<>>><<>>>><<<>><<<>>><>>><<<><><<><<>>><>>><<<>><<<>>>><<<<>>>><<<<>><<<>>><<<>><<>><>>>><<<<>><<<>>>><<<>><<<>>>><>>>><>>><<<<><>>><>>><<>><><<<>>>><<<<>>>><<>><<>>><><>><<<<>><<<>><<<>>>><<<>><<<>>><<>>><<<>>>><<><<<<>><>>><<<>>><<><<<<>><<<<>>><<<<>>>><<<><<<<>>><<<<>>>><<<>>><><<>>>><>>>><<<<>>><<<>>><<<<><<<>><<<><<<>><<<>>>><<<<>>>><<>>><<>><<>>>><<<>><><<<>>>><><<<>>>><<><<>>><>>><<<<>><<<<>>>><<<<><<<>>>><<>><<<>><<<>><<<<>><>>>><<<<><<<<>>>><><<>><<>><<<<>><<<<>>>><<<<>>><<><<><<>>>><>>>><<><<<>>><<>>><<>><>><<<><<>>>><<<>>><>>>><>>><<><<><<><>><>>>><>><>><<>><<<>><<>><<<<>>><<<<>>><><<<>>>><><<>><>>><>><<<><<>><<><><<<>>>><<<<>>>><<<<><>>>><<<<>>><<>>>><<<>><<<<>><<>>>><<<<>>>><<>>><<<<>><<<>>><<<<>><<>><<<>>>><>>>><<<<><<<<>>><<<<>><<<<>>>><<<>><<<<>>><>><><<<<><<><<<>><<><<<>>><<<>>><<><<>>><<>>>><<<<>><>>>><<><<>>><<>>>><<><<<<>><>><>><<>><<<>>>><<<<>>>><<<><<<<>>>><<<<>>>><<>><<>>>><<<>>>><>>><<<><<<>>>><<>>><<<<>>>><<<<><<>><<>>><<>><<<>>>><>><>><<<><<<>>><<<><>>>><>>><><<<<>><<<>>>><<<<>><<>><<<>>>><>>>><<>>><<<<>>><<<>>>><<<<>><<<<>>>><<<<>><<<><<>>><<>>><><<<><<<>><<>>>><>><<<>><<>><<<<>>><<><<<>>><<>>>><<<<><<>>>><><>>>><<>>><<<<><<<<>><<<><<<><<><<<>>><<<<><<<>><><<<<>>>><<<<>>>><<<>><<<>>><<<><<><><<>>>><>>><<<<>>>><<<<>>><<>>><<<<><<<<>>><<<><<<<>><<><<><<<>><<>><<>>><<>>><<>>><>>><<<>>>><<<<>>><>>><<<>><<><<>>>><<<<>>>><<<>>>><<<>>><<><<><<<><<<><>>>><><<<<><<<>>>><>>><>>>><>><<>><<<<>>>><<>>><>><>><>>><<<<>>><>><<<<>>>><<<<><<>><>>>><>>><<>>>><<<>>>><<>><<<<><<<>><><<<<>>>><>>>><>>><<<>>>><>>>><<<<>>>><<<>>>><<><<><<>>><<><<>><>>>><<<>>><<<>>><<<>>><><<<<>>><>><<<<><<>>><<>><<<<><<<<>><<>><<>><<>>>><<<>>>><>>><<<>>>><<<>><<<<>>><>><<>>><><<>>><<<>>><>><<>><<<<>><<<>>>><<<<>><<>><<<<>>>><<<>>>><<<<><<<<>><<<<>><<<<>>>><<>><<<<>>>><<<<>>>><>>>><>>><>>><<<<><<<>><<>>>><><<>>><>>>><<<<>>>><>><>>>><>>>><<<><<<>>><<>>>><<<<><>>><<>><<<>>>><<>>>><<>><<<><<<>>><<<><<><<>>><>><>>><<>>>><<<>><<>>><<<>>>><<>><><<>><<<<>>><<<>><<<>>><>><<>>><<<<>>>><<>><<>><<<<>>>><<>>><>>>><>><<>><<>>>><<<>>>><<<>>><<>>>><<><<><<<><<>>>><<>>>><<><>>><<><<<>>>><><<>><<<>><<<>>>><<>><<<<>>>><>><<<>><>>><<<>>><<<>>>><<<<>>><<<>><<<<>>><><<<<>>>><<><<>><<<<><<><<>>>><>><>><>>><<<>>>><<<<><<<>><<>>>><><<<><<>>><<<<><<<<>>>><<<>>>><<<>><<<>><<<><<><<><><<<<>>>><<<<><<<>><<<<><<<<><<<<>>>><<<>><<<>>>><<<<>><>><<>><>>>><>><<>><<><<<><<<>><<<>>><<<<>>><<<>>>><>>><<<><><<<<>>><<<<>><<<<>>>><>>><<<<>>>><<>>>><<<<><<>>>><<<<><<>>><<<>>><<<><<<<>>>><<<<>><<<<>><<<<><<<>>><<<<><<<<>><<<>><<<<>><<>>>><><<>>><>>><<<>><<><<><<>><<><><<>>>><><>>><<<>><>>><<<>>><<<>><<<<>>><<>>><<>>>><<>>><<<<>><<<<><>>>><>>>><<<<>>><<<>><><><<>>>><<><<<>>>><<>><<<><><<<<><<<><<<>><<<<>>><<<<>><<<<>><<<<>>>><<<<>>>><><>>>><<>>><<><<<>>><<<><>>>><<<<>>>><>><<<>><<>><<>>>><<<<><>>><<<<>><<><<>><<<<>>><><<<><<<><<<>>><<>><<<<>>>><<<>>>><<<<><>>>><><>><<<>>><<<<>>>><<<>>>><<>><<><<>><<<<>>><<<<>><<>>>><<>><<<<>>>><<<>>>><<<<>>><<>><<<<><><<>><>>><<><<<>><<<>><<<>>>><<>><<<<>>><<<>>>><>>><<<><<<<>>>><<<<>>><<<>><<<>>><><<<<>>><<>>>><<<>>><>><><>><<<><<<<><<<<>>>><<<>>><><<<><<<>><<>><<><<><>><><<<>><<<<>><<>>>><<<<>>>><><<<<><<<>>>><>>><<<>>>><<<>><>>>><<<>><<<<>>><<<<>><<>><><<<<>><<>>><<<<>><<<>>>><<><>>>><<<<>>>><><>>><<>>>><>><<>>>><><>><<>>><><>>><<<>>>><<<<>>><<<><<<<>>>><<<>><<<<>><<<>><>><<<>>><<<<>><<>>><>><<<<>>>><<<>><<>><>>><<<<>>>><><<><<<>>><<<<>><<<<>><><>>><<>><>>>><<<<>>>><<<>>><<<>><<<<>>>><<<>><<>>><<<>>><>>><<<><<<<>>>><<><<<<><<<>>>><>>>><<<>><>>>><><<<<>><<<<>>>><<<>>><>>>><>><<<>>>><<><<<>>><<><<<>>>><<>><<>>><<<>>>><<<<>><>>><<<<><<<<>>>><>><<<>>><<><>><<<>><>>><<<>>><<<<>>>><<<>>>><>>><<><<<<>>>><><<<>>>><<>>><><<<>>><<<<>><<<>>><<>>><<<><<><<<>><<>><<<<>>><<<><><>><<>>><<<<>>><>>>><<><<<<>>>><<<<><<<>>><<<>><<>>>><>>>><<<><<>>><<<>>>><<><<<>>><><<<<>><<<<><<<<>><<>><<<<>>>><<<>><<<<><<<<>>><<>>><<<>>><<<<><<<<>>><<<<>>>><<<>>><<><<<<>>><<<<>>><><<<>>><<><<<>><>>><<<<>>>><<<<>>><<>><<<<>><<<><<<<><<>>>><<<<>>>><<>>>><<<<>>><<<>>>><<>>><<>>><<<<><<<<>>>><><<<>>><<<>>><><<<<>>><<>>>><<<<>>><<<>><<>>>><<<<>><<>><<<<>><<<<>>>><<<><>>>><<<><<<<>><>>><>><<<<>>><>>>><>><>><<<<>>>><<<<><>>><<<<>><>><><><<>><<<>><<<><>>><<<<><<<>><<<<>><<<<>>><<>>>><<><<<<>><<<>>><<<>><>><>>>><<<<>>><<>><<>><<>>>><<<<>>>><<<<><<>><>><>>>><<<>>><<<<>><<>>>><<>>><>>>><<>>>><<<<>>>><<<<>>><<>><<<>>><<>>>><<>>>><<<><<<>>>><<<<>>>><<<><<><<>>>><>>><<>><<>><<<>>>><<<><<>>><<><<<>>>><<<>>><>>><<<>><<<>><>>><<<<>><<<>>>><<><<>>><>>><>><<>><<<>>>><<>><<<<><><<<><<>>>><<>><<<>>>><<<><<<<><<><<<<>>>><<<<>><<><>>><<<><><<<<>><<>><<<<><>><<><<<>><<<>>>><>><>>><<<><><<<>><<<>><>>><>><<<<>><<<>>><<<>>>><>><>>>><<>><<<>>><<>>><<><<>><<>><><<<>>><<<>><<<<>><<<>>><<<<>><<<>>><<<>>><<<<><<<<>>><>><<<<>>><<<>>>><<<>><<>>><<>>><>>><<><<<><<<<><<>>>><<<><<>>><>>>><<<>>>><>>>><<><<<>>><>>><<>>><<>>>><>>>><>>><<>><<<>>><<<>><>><>>>><<<><>>><>><>>><>>><<<>>>><<>>>><<<>>><<<<>><>><><<>>>><>><<><<<<><><><<>>>><<<<>>><>>><<<>>>><<<>>><>>><<<>><<<>>><<<<>><<>><<<<>>><<<>><<<<>>><<<<>><>><>>>><>>><>><<<<>><<<<><>>><>><>>><<<<>>>><<<><<>>><<>>>><<<<>><<<<><>><>><<>>><<>><<><>><><<>>>><<<<>>>><<<<>>>><<>>><<<<><>>>><<<<>>><<<>><<>>>><>>><<<>>><<>>>><<<>><<<><<<<>>>><<<>>>><<<<>><<<><<<<>>>><><><><>>><<<>><<<>><<<>>><<>><<<<>><<<<>>><<<>><<<<>><>><<<>><<<>>>><<<>>>><<>><<<<>>><<>>>><<>><<>>>><<<<>>>><<<>>><<>>>><<<>>>><<><<<<><<>><<<>><<<>><<><<<>><><>>><<>>><<><>>><<<<>>>><<<>>><<>>>><<<>>>><<<>>>><<<<>><<<<>><<>><>>><<>><<><<<>>><<<>><<><<>><<><<<<>>><>>><<><<<>>>><<>>>><>>><<>>><<><><<<<>>><<><<<>><<<><<>>><<<<>>>><<>>>><><>>><<<>>>><<<>><<<<><<<<><<<<>>><><<<>><<<<>>><<<<><<<>>><<<>><<<<>><<<<>>>><<<<><>><<<>>><<<<><<><<<<><<<<>>><<>>><>>>><<<>>><>>><<>><>><<<<><<<<>>>><<<>>><<<><<>>>><<><<<<>><<>>>><<<>><<<<><<<<>>><>><><<<>>>><<<<>><>>>><>>><<<<>>>><<>><<>><>>><<><<><>>>><<<<>>><<<>><>>><<<><>>><<<<>><<<<>>>><>>><>>><>>>><>><<>>><<<<>><>>><<><<<>>><<>>>><>>>><<>>><<<<>>><<><<<><<<><<<<>>>><<<>>>><<<>>><<<<>>>><<<<>>>><<>><<<<>>><<>>><><<>><<><>>><<>>><>>>><<<>>>><<<<>>><<<><<<<><>>><<><>>>><<<<>>>><<<>>><>>>><<<<>>><<<>>>><<>>><<<><<>>>><<>>>><<<<><>>>><<>>><<<<><<<><>>>><<<<>>><<<>><>><<>><>>><>>><<<>><<><>><<<<>><<<<><<<<>>><<<>>>><<<<>>>><>>>><<<<>><<<<><<<<>>>><<<<>>><<<>>>><>>><<>>>><<<>><>>>><<<<>>>><<<>><<>>>><<<>>>><<<><<>>>><<<<>>>><<<<>><<<<>>>><>>><<>>><<<>>>><<<>>><<<>><>><<>><>>><<>><<<>><<<><<<<>><<<<>>><<<<>>>><<<<>>><<<>><<<<><<<><<<><<<>>><<>><>><>>><<>>><<<<><<<<>><>>><>>><<<><<<<>>><>>>><<>><<<<>>>><<>>><<<><><>>>><<>>>><><>>>><<><<<<>><<<<>><<<>><>>><<>>><<<<>>>><<<<>><<<<><<><>>>><<<>><<>><<<>>>><><<<><<<>>><>>>><<>>><<<<>>>><><>><>>><<<<>><<><>>>><<<>><<<<><<<>>><>>><<><<<>>><<<<>><<<>><<<>>><>>>><<<>>>><<<>>>><<<>>><<<<>><<<<>><<<<>><<<<>>>><<<>><>><>><<>>>><>>>><><<<<>><<><<>><>><>>>><<>>>><<>>><<>>>><<>><<<>><<<<>>>><<<<><>>><<<<><<><<<><<<>><><<<>>>><<>>><<<>>>><>>><<<<>>><<<>>><<<>>><>>><<<<>><<>>>><><>>><<>>>><<>>><<>>><><<<>>><<<<><<<>>>><<<><<<<>><>>><<<>>><>>><<><<><<>>>><<>>><<<><<><<>>>><<<>><<>><<<<>><>>>><>><>><><>><><<>>>><>><<<>>>><<><<<>><<<<>><<><<<<><<><>>><<>>><<>><<<>>>><<<<>>>><<<<>>>><<<<>><<<<><<<>>><<<><<>><><<>>>><<><>><>>>><>>>><<>>><<><<<>>>><<<<>>>><>>>><>><<<<>>>><>>>><<<>><<>><<<<><<>>>><<<>>>><>>>><<>>>><>><><<<<>>>><<<><<>><<<<>>>><<<>>>><<<<><<<>><>>>><<<<>><<<><<<<>>><<<>><<>>>><<<<>><<<><<>><<<>'
SHAFT_WIDTH = 7

# the position (x and y offset relative to the previouis rock) is always the same as a function of:
#      - the actual rock
#      - the x-position of the previous rock once rested

HEIGHTS = []

# def colliding( rock, fallen_rocks):
#     for fallen_rock in reversed(fallen_rocks[-100:]):
#         if rock.collides(fallen_rock):
#             return True
        
#     return False

class Rock:
    def __init__(self, shape_pattern: list):
        shape_coordinates = list()
        for y, row in enumerate(reversed(shape_pattern.split('\n'))):
            for x, cell in enumerate(row):
                if cell != '.':
                    shape_coordinates.append((x, y))        
        self._shape_pattern = shape_coordinates
        self._x_offset = None
        self._y_offset = None
        self._x_min = min(x for x, _ in self._shape_pattern)
        self._x_max = max(x for x, _ in self._shape_pattern)
        self._y_min = min(y for _, y in self._shape_pattern)
        self._y_max = max(y for _, y in self._shape_pattern)
        self._collision_coordinates = None
        self._top = 0 
        self._bottom = 0
        self._left = 0
        self._right = 0

    def initialise_position(self, top_of_rock_stack: int):
        self._x_offset = 2
        self._y_offset = top_of_rock_stack + 3
        
        self._top = self._y_max + self._y_offset
        self._bottom = self._y_min + self._y_offset
        self._left = self._x_min + self._x_offset
        self._right = self._x_max + self._x_offset

        self._collision_coordinates = {(x + self._x_offset, y + self._y_offset) for x, y in self._shape_pattern}

    def drop(self, fallen_rocks: list) -> bool:
        """ Try to drop the rock. Return True is successful else False"""
        if self._bottom == 0:
            return False # sat on the floor        
        return self.try_movement(0, -1, fallen_rocks)

    def apply_jet(self, jet_char: str, fallen_rocks: list):
        x_offset = -1 if jet_char == '<' else 1
        if self._left == 0 and x_offset == -1:
            return False
        if self._right == SHAFT_WIDTH - 1 and x_offset == 1:
            return False
        
        return self.try_movement( x_offset, 0, fallen_rocks)

    def collides(self, other_rock, test_coordinates):
        # now we need to check each coordinate
        return not test_coordinates.isdisjoint(other_rock.rock_coordinates)

    def try_movement(self, x_offset, y_offset, fallen_rocks):
        test_coordinates = {(x + self._x_offset + x_offset, y + self._y_offset + y_offset) for x, y in self._shape_pattern}
        for rock_index, fallen_rock in enumerate(reversed(fallen_rocks[-30:])):
            if fallen_rock._top < self._bottom + y_offset or fallen_rock._bottom > self._top + y_offset or \
                fallen_rock._right < self._left + x_offset or fallen_rock._left > self._right + x_offset:
                continue
            
            if self.collides(fallen_rock, test_coordinates):
                if rock_index > 25:
                    pass
                return False
            
        self._x_offset += x_offset
        self._y_offset += y_offset
        self._top = self._y_max + self._y_offset
        self._bottom = self._y_min + self._y_offset
        self._left = self._x_min + self._x_offset
        self._right = self._x_max + self._x_offset

        self._collision_coordinates = test_coordinates
        return True
        
    @property
    def rock_coordinates(self):
        return self._collision_coordinates

    # @property
    # def left(self):
    #     return self._x_min + self._x_offset

    # @property
    # def right(self):
    #     return self._x_max + self._x_offset

    # @property
    # def top(self):
    #     return self._top

    # @property
    # def bottom(self):
    #     return self._y_min + self._y_offset

    # def __str__(self):
    #     height = self.top - self.bottom + 1
    #     visualisation =  [['.'] * 7 for _ in range(height)]
    #     for x, y in self.rock_coordinates:
    #         visualisation[y - self._y_offset][x] = '*'
    #     return '\n'.join([''.join(r) for r in reversed(visualisation)])

def solve():

    jet_pattern = JET_PATTERN_PUZZLE
    rocks = [Rock(SHAPES_PATTERN[rock_no]) for rock_no in range(len(SHAPES_PATTERN))]
    jet = 0
    column_heights = [0] * SHAFT_WIDTH
    top_of_block_stack = 0
    fallen_rocks = []

    heights_list = []
    for rock_no in range(2022):
        rock = deepcopy(rocks[rock_no % len(SHAPES_PATTERN)])
        rock.initialise_position(top_of_block_stack)

        # print(rock)
        continue_dropping = True
        while continue_dropping:
            rock.apply_jet(jet_pattern[jet], fallen_rocks)
            jet = (jet + 1) % len(jet_pattern)
            continue_dropping = rock.drop(fallen_rocks)
            # print(rock)
    
        fallen_rocks.append(rock)
        top_of_block_stack = max(top_of_block_stack, rock._top + 1)

        # Update column heights
        for x, y in rock.rock_coordinates:
            column_heights[x] = max(column_heights[x], y + 1)

        heights_list.append(max(column_heights))
        # if rock_no % 10000 == 0:
        #     print(rock._top - last_top)
        #     last_top = rock._top

        # print(str(rock))
    print(fallen_rocks[-1]._top + 1)


if __name__ == '__main__':

    # pr = cProfile.Profile()
    # pr.enable()
    solve()
    # pr.disable()
    # s = io.StringIO()
    # sortby = 'cumulative'
    # ps = pstats.Stats(pr, stream=s).sort_stats(sortby)
    # ps.print_stats()
    # print(s.getvalue())